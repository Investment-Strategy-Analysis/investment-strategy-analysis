version: "3.6"

services:
  user-service:
    container_name: user_service
    build:
      context: services
      dockerfile: user-service.dockerfile
    restart: always
    networks:
      - backend
    ports:
      - "8000:8000"
    env_file:
      - jwt.env
      - user-db.env
    depends_on:
      - algo-service
      - user-db

  algo-service:
    container_name: algo_service
    build:
      context: services
      dockerfile: algo-service.dockerfile
    restart: always
    networks:
      - backend
    env_file:
      - algo-db.env
    ports:
      - "8001:8000"
    depends_on:
      - algo-db
    healthcheck:
      test: ["CMD", "curl", "-f", "postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_DB}:5432/${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  ui-service:
    container_name: ui_service
    build:
      context: services/ui_service
      dockerfile: ui-service.dockerfile
    networks:
      - backend
    ports:
      - "5001:5001"
    depends_on:
      - user-service
    healthcheck:
      test: ["CMD", "curl", "-f", "postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_DB}:5432/${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  user-db:
    container_name: user_db
    image: postgres:13.3
    env_file:
      - user-db.env
    networks:
      - backend
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER}'"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  algo-db:
    container_name: algo_db
    image: postgres:13.3
    env_file:
      - algo-db.env
    networks:
      - backend
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER}'"]
      interval: 10s
      timeout: 5s
      retries: 5

  # https://pogrebnoijak.grafana.net/d/rYdddlPWk/node-exporter-full?orgId=1
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --collector.filesystem.ignored-mount-points
      - ^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)
    expose:
      - 9100
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./hisa-prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    expose:
      - 9090
    networks:
      - monitoring

networks:
  backend:
  monitoring:
    driver: bridge
    
volumes:
  prometheus_data: {}
